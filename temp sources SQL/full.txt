DROP SCHEMA public CASCADE;
CREATE SCHEMA public;

CREATE TABLE IF NOT EXISTS public."Supplier"
(
    s_id serial NOT NULL,
    s_name character varying(255) NOT NULL,
    s_site character varying(255) NOT NULL,
    s_description character varying(255) NOT NULL,
    CONSTRAINT s_id PRIMARY KEY (s_id),
    CONSTRAINT s_id_unique UNIQUE (s_id)
);

CREATE TABLE IF NOT EXISTS public."Supply"
(
    sp_id serial NOT NULL,
    sp_item character varying(255) NOT NULL,
    sp_date character varying NOT NULL,
    sp_total integer NOT NULL,
    s_id integer NOT NULL,
    CONSTRAINT sp_key PRIMARY KEY (sp_id, s_id),
    CONSTRAINT sp_key_unique UNIQUE (sp_id)
);

CREATE TABLE IF NOT EXISTS public."Product"
(
    p_id serial NOT NULL,
    p_brand character varying(255) NOT NULL,
    p_name character varying(255) NOT NULL,
    p_description character varying(255) NOT NULL,
    p_price integer NOT NULL,
    p_quantity integer NOT NULL,
    p_category character varying(255) NOT NULL,
    CONSTRAINT p_key PRIMARY KEY (p_id),
    CONSTRAINT p_key_unique UNIQUE (p_id)
);

CREATE TABLE IF NOT EXISTS public."Order"
(
    o_id serial NOT NULL,
    c_id integer NOT NULL,
    p_id integer NOT NULL,
    o_date character varying(255) NOT NULL,
    CONSTRAINT o_c_p_key PRIMARY KEY (o_id, c_id, p_id),
    CONSTRAINT o_c_p_key_unique UNIQUE (o_id)
);

CREATE TABLE IF NOT EXISTS public."Client"
(
    c_id serial NOT NULL,
    c_fio character varying(255) NOT NULL,
    c_city character varying(255) NOT NULL,
    c_address character varying(255) NOT NULL,
    c_phone character varying(255) NOT NULL,
    CONSTRAINT c_key PRIMARY KEY (c_id),
    CONSTRAINT c_key_unique UNIQUE (c_id)
);

CREATE TABLE IF NOT EXISTS public."Warehouse"
(
    p_id serial NOT NULL,
    sp_id serial NOT NULL,
    CONSTRAINT p_sp_key PRIMARY KEY (p_id, sp_id),
    CONSTRAINT p_sp_key_unique UNIQUE (p_id)
);

ALTER TABLE IF EXISTS public."Supply"
    ADD CONSTRAINT s_id_fk FOREIGN KEY (s_id)
    REFERENCES public."Supplier" (s_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Order"
    ADD CONSTRAINT c_id_fk FOREIGN KEY (c_id)
    REFERENCES public."Client" (c_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Order"
    ADD CONSTRAINT p_id_fk FOREIGN KEY (p_id)
    REFERENCES public."Product" (p_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Warehouse"
    ADD CONSTRAINT p_id_fk FOREIGN KEY (p_id)
    REFERENCES public."Product" (p_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Warehouse"
    ADD CONSTRAINT sp_id_fk FOREIGN KEY (sp_id)
    REFERENCES public."Supply" (sp_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;




INSERT INTO public."Product" (p_brand, p_name, p_description, p_price, p_quantity, p_category) 
VALUES 
('Priscilla Custom Effects', 'TS-S', 'Overdrive', 11800, 1, 'Custom Effects'),
('Priscilla Custom Effects', 'PRISCILLA', 'Overdrive-Distortion', 15200, 1, 'Custom Effects'),
('Priscilla Custom Effects', 'M', 'Modern Overdrive', 14200, 1, 'Custom Effects'),
('Priscilla Custom Effects', 'H&B', 'Booster', 3800, 1, 'Custom Effects'),
('Priscilla Custom Effects', 'OD-3 TK mod', 'Именная модель Toru Kitajima', 4800, 1, 'Mods'),
('Priscilla Custom Effects', 'BD-2 TK mod', 'Именная модель Toru Kitajima', 3800, 1, 'Mods'),
('Priscilla Custom Effects', 'SPH-1 SPI mod', 'Именная модель Toru Kitajima', 4800, 1, 'Mods'),
('Priscilla Custom Effects', 'SPH-1 WAXX mod', 'Именная модель Toru Kitajima', 4800, 1, 'Mods'),
('Priscilla Custom Effects', 'LS-2 TK mod', 'Именная модель Toru Kitajima', 2800, 1, 'Mods');

INSERT INTO public."Client" (c_fio, c_city, c_address, c_phone) 
VALUES 
('Akira', 'Tokyo', 'far away', '+79876543210'), 
('couscousdude', 'Tokyo', 'far away', '+79876543210'),
('Fu re te fu re ru', 'Tokyo', 'far away', '+79876543210'),
('roshiajinn', 'Tokyo', 'far away', '+79876543210'),
('aF', 'Tokyo', 'far away', '+79876543210'),
('mc', 'Tokyo', 'far away', '+79876543210'),
('fussedsyko', 'Tokyo', 'far away', '+79876543210'),
('nsn', 'Tokyo', 'far away', '+79876543210'),
('Futti Peace', 'Tokyo', 'far away', '+79876543210'),
('霪島時雨', 'Tokyo', 'far away', '+79876543210'),
('abnormaltrick', 'Tokyo', 'far away', '+79876543210'),
('技craft enjoyer', 'Tokyo', 'far away', '+79876543210'),
('TYの時雨', 'Tokyo', 'far away', '+79876543210'),
('Toru Kitajima', 'Tokyo', 'far away', '+79876543210'),
('345', 'Tokyo', 'far away', '+79876543210'),
('Pierre Nakano', 'Tokyo', 'far away', '+79876543210'), 
('Shutoku Mukai', 'Tokyo', 'far away', '+79876543210');

INSERT INTO public."Order" (c_id, p_id, o_date) 
VALUES 
(1, 1, '2023-05-24'),
(2, 2, '2023-05-24'),
(3, 3, '2023-05-24'),
(4, 4, '2023-05-24'),
(5, 5, '2023-05-24'),
(6, 6, '2023-05-24'),
(7, 7, '2023-05-24'),
(8, 8, '2023-05-24'),
(9, 9, '2023-05-24');

INSERT INTO public."Supplier" (s_name, s_site, s_description) 
VALUES 
('Автограф', 'https://avtograf72.ru', 'Типография'),
('chipdip.', 'https://www.chipdip.ru', 'Электрокомплектующие'),
('DIY-TUBES', 'http://diy-tubes.ru', 'Электрокомплектующие'),
('Mouser', 'https://ru.mouser.com', 'Электрокомплектующие'),
('Унисервис', 'https://uniservice.msk.ru', 'Электрокомплектующие');

INSERT INTO public."Supply" (sp_item, sp_date, sp_total, s_id) 
VALUES 
('Наклейка', '2023-05-24', 1400, 1),
('Резистор', '2023-05-24', 1500, 2),
('Конденсатор', '2023-05-24', 3600, 3),
('Потенциометр', '2023-05-24', 1200, 4),
('Макетная плата', '2023-05-24', 800, 5);




CREATE OR REPLACE FUNCTION update_warehouse() RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO public."Warehouse" (p_id, sp_id) VALUES (NEW.p_id, NEW.sp_id);
    ELSIF TG_OP = 'UPDATE' THEN
        UPDATE public."Warehouse" SET p_id = NEW.p_id, sp_id = NEW.sp_id WHERE p_id = OLD.p_id AND sp_id = OLD.sp_id;
    ELSIF TG_OP = 'DELETE' THEN
        DELETE FROM public."Warehouse" WHERE p_id = OLD.p_id AND sp_id = OLD.sp_id;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER product_trigger
AFTER INSERT OR UPDATE OR DELETE ON public."Product"
FOR EACH ROW
EXECUTE PROCEDURE product_trigger();

CREATE TRIGGER supply_trigger
AFTER INSERT OR UPDATE OR DELETE ON public."Supply"
FOR EACH ROW
EXECUTE PROCEDURE supply_trigger();




SELECT * FROM public."Warehouse"
LEFT JOIN public."Product" ON public."Warehouse".w_id=public."Product".p_id






